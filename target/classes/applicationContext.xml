<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

	<!-- <context:component-scan base-package="polymorphism"></context:component-scan> -->

	<context:component-scan base-package="com.springbook.biz"></context:component-scan>

	<!-- <bean id="tv" class="polymorphism.SamsungTV"> -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV" p:speaker-ref="sony" p:price="2700000"> 
		<constructor-arg index="0" ref="sony"></constructor-arg> <constructor-arg 
		ref="apple"></constructor-arg> <constructor-arg value="2700000"></constructor-arg> 
		<property name="speaker" ref="apple"></property> <property name="price" value="2700000"></property> 
		</bean> <bean id="sony" class="polymorphism.SonySpeaker"></bean> <bean id="apple" 
		class="polymorphism.AppleSpeaker"></bean> -->
	<!-- <bean id="collectionBean" class="com.springbook.ioc.injection.CollectionBean"> 
		<property name="addressList"> <list> <value>서울시 강남구 역삼동</value> <value>서울시 
		강동구 행정동</value> </list> </property> </bean> -->
	<!-- <bean id="userService" class="com.springbook.biz.user.Impl.UserServiceImpl"> 
		<property name="userDAO" ref="userDAO" /> </bean> <bean id="userDAO" class="com.springbook.biz.user.Impl.UserDAO"></bean> -->

	<!-- DB 설정 -->

	<context:property-placeholder location="classpath:config/database.properties" />

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>


	<!-- Spring JDBC 설정 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- Transaction 설정 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get" read-only="true" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="txPointcut" expression="execution(* com.springbook.biz..*(..))" />
		<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice" />
	</aop:config>

	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	<bean id="log" class="com.springbook.biz.common.LogAdvice" />
	<bean id="before" class="com.springbook.biz.common.BeforeAdvice" />
	<bean id="afterReturning" class="com.springbook.biz.common.AfterReturningAdvice" />
	<bean id="afterThrowing" class="com.springbook.biz.common.AfterThrowingAdvice" />
	<bean id="after" class="com.springbook.biz.common.AfterAdvice" />
	<bean id="around" class="com.springbook.biz.common.AroundAdvice" />

	<aop:config>
		<aop:pointcut id="allPointcut"
			expression="execution(* com.springbook.biz..*Impl.*(..))" />
		<aop:pointcut expression="execution(* com.springbook.biz..*Impl.get*(..))"
			id="getPointcut" />

		<aop:aspect ref="log">
			<aop:before pointcut-ref="allPointcut" method="pringLog" />
			<aop:before pointcut-ref="getPointcut" method="pringLog" />
		</aop:aspect>

		<aop:aspect ref="before">
			<aop:before pointcut-ref="allPointcut" method="beforeLog" />
		</aop:aspect>

		<aop:aspect ref="afterReturning">
			<aop:after-returning pointcut-ref="getPointcut"
				method="afterLog" returning="returnObj" />
		</aop:aspect>

		<aop:aspect ref="afterThrowing">
			<aop:after-throwing pointcut-ref="allPointcut"
				method="exceptionLog" throwing="exceptObj" />
		</aop:aspect>

		<aop:aspect ref="after">
			<aop:after pointcut-ref="allPointcut" method="finallyLog" />
		</aop:aspect>

		<aop:aspect ref="around">
			<aop:around pointcut-ref="allPointcut" method="aroundLog" />

		</aop:aspect>
	</aop:config>

</beans>
